// utils/socket.ts
import { io, Socket } from 'socket.io-client';

class SocketService {
    private socket: Socket | null = null;
    private isConnecting = false;

    connect(apiUrl: string, userId: string, token: string) {
        // √âviter les doubles connexions
        if (this.socket?.connected) {
            console.log('‚úÖ Socket d√©j√† connect√©');
            return;
        }

        if (this.isConnecting) {
            console.log('‚è≥ Connexion en cours...');
            return;
        }

        this.isConnecting = true;
        console.log('üîå Connexion Socket.IO vers:', apiUrl);

        this.socket = io(apiUrl, {
            auth: { token },
            transports: ['websocket', 'polling'],
            reconnection: true,
            reconnectionDelay: 1000,
            reconnectionAttempts: 5,
            timeout: 20000
        });

        this.socket.on('connect', () => {
            console.log('‚úÖ Socket connect√©:', this.socket?.id);
            this.isConnecting = false;
        });

        this.socket.on('authenticated', (data) => {
            console.log('üîê Authentification r√©ussie:', data);
        });

        this.socket.on('disconnect', (reason) => {
            console.log('‚ùå Socket d√©connect√©:', reason);
            this.isConnecting = false;
        });

        this.socket.on('connect_error', (error) => {
            console.error('‚ùå Erreur de connexion:', error.message);
            this.isConnecting = false;
        });

        this.socket.on('error', (error) => {
            console.error('‚ùå Erreur Socket:', error);
        });
    }

    disconnect() {
        if (this.socket) {
            console.log('üëã D√©connexion Socket');
            this.socket.disconnect();
            this.socket = null;
        }
    }

    isConnected(): boolean {
        return this.socket?.connected || false;
    }

    // ‚úÖ M√©thodes de gestion des chats
    joinChat(chatId: string) {
        if (this.socket?.connected) {
            console.log(`üîó Rejoindre chat: ${chatId}`);
            this.socket.emit('join_chat', chatId);
        } else {
            console.warn('‚ö†Ô∏è Socket non connect√©, impossible de rejoindre le chat');
        }
    }

    leaveChat(chatId: string) {
        if (this.socket?.connected) {
            console.log(`üëã Quitter chat: ${chatId}`);
            this.socket.emit('leave_chat', chatId);
        }
    }

    // ‚úÖ √âcouter les nouveaux messages
    onNewMessage(callback: (data: any) => void) {
        if (this.socket) {
            this.socket.on('new_message', (data) => {
                console.log('üì® [SOCKET] new_message re√ßu:', data);
                callback(data);
            });
        }
    }

    // ‚úÖ √âcouter les messages lus
    onMessagesRead(callback: (data: any) => void) {
        if (this.socket) {
            this.socket.on('messages_read', callback);
        }
    }

    // ‚úÖ √âv√©nements globaux
    onChatCreated(callback: (data: any) => void) {
        if (this.socket) {
            this.socket.on('chat_created', callback);
        }
    }

    onParticipantAdded(callback: (data: any) => void) {
        if (this.socket) {
            this.socket.on('participant_added', callback);
        }
    }

    onChatDeactivated(callback: (data: any) => void) {
        if (this.socket) {
            this.socket.on('chat_deactivated', callback);
        }
    }

    onPermissionsUpdated(callback: (data: any) => void) {
        if (this.socket) {
            this.socket.on('participant_permissions_updated', callback);
        }
    }

    on(event: string, callback: (data: any) => void) {
        if (this.socket) {
            this.socket.on(event, callback);
        }
    }

    // ‚úÖ Nettoyer les listeners
    off(event: string, callback?: any) {
        if (this.socket) {
            this.socket.off(event, callback);
        }
    }

    // ‚úÖ √âmettre un √©v√©nement
    emit(event: string, data: any) {
        if (this.socket?.connected) {
            this.socket.emit(event, data);
        } else {
            console.warn(`‚ö†Ô∏è Impossible d'√©mettre ${event}: socket d√©connect√©`);
        }
    }

    // ‚úÖ Obtenir l'instance socket (pour debug)
    getSocket(): Socket | null {
        return this.socket;
    }
}

// Export singleton
const socketService = new SocketService();
export default socketService;